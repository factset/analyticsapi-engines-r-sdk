% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spar_calculations_api.R
\docType{class}
\name{SPARCalculationsApi}
\alias{SPARCalculationsApi}
\title{SPARCalculations operations}
\format{
An \code{R6Class} generator object
}
\description{
factset.analyticsapi.engines.SPARCalculations
}
\section{Methods}{

\describe{
\strong{ CancelSPARCalculationById } \emph{ Cancel SPAR calculation }
This is the endpoint to cancel a previously submitted calculation.  Instead of doing a GET on the polling URL, cancel the request by doing a DELETE

\itemize{
\item \emph{ @param } id character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 204 | Expected response, calculation was canceled successfully.


\item response headers :

\tabular{ll}{
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 400 | Invalid identifier provided.


\item response headers :

\tabular{ll}{
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 401 | Missing or invalid authentication.


\item response headers :

\tabular{ll}{
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
\item status code : 403 | User is forbidden with current credentials


\item response headers :

\tabular{ll}{
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 404 | There was no request for the calculation identifier provided, or the request was already canceled for the provided identifier.


\item response headers :

\tabular{ll}{
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 500 | Server error. Log the X-DataDirect-Request-Key header to assist in troubleshooting.


\item response headers :

\tabular{ll}{
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
\item status code : 503 | Request timed out. Retry the request in sometime.


\item response headers :

\tabular{ll}{
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
}

\strong{ GetSPARCalculationById } \emph{ Get SPAR calculation by id }
This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.

\itemize{
\item \emph{ @param } id character

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 200 | Expected response once calculation is completed, returns JSON in the format specified in the Run Calculations endpoint.

\item return type : object 
\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 202 | Expected response returned if the calculation is not yet completed.


\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 400 | Invalid identifier provided.


\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 401 | Missing or invalid authentication.


\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
\item status code : 403 | User is forbidden with current credentials


\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 404 | Calculation was already returned, provided id was not a requested calculation, or the calculation was cancelled


\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 500 | Server error. Log the X-DataDirect-Request-Key header to assist in troubleshooting


\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
\item status code : 503 | Request timed out. Retry the request in sometime.


\item response headers :

\tabular{ll}{
Cache-Control \tab Standard HTTP header. Header will specify max-age in seconds. Polling can be adjusted based on the max-age value. \cr
Content-Encoding \tab Standard HTTP header. Header value based on Accept-Encoding Request header. \cr
Content-Type \tab Standard HTTP header. \cr
Transfer-Encoding \tab Standard HTTP header. Header value will be set to Chunked if Accept-Encoding header is specified. \cr
X-DataDirect-Request-Key \tab FactSet&#39;s request key header. \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
}

\strong{ RunSPARCalculation } \emph{ Run SPAR Calculation }
This endpoint runs the SPAR calculation specified in the POST body parameters.  It must be used first before polling or cancelling endpoints.   A successful response will contain the URL to poll for the result of the calculation.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the SPAR template.

\itemize{
\item \emph{ @param } spar.calculation.parameters \link{SPARCalculationParameters}

\item On encountering errors, an error of subclass ApiException will be thrown.

\item status code : 202 | Expected response, contains the poll URL in the Location header.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 201 | Expected response if calculation is completed within 30 seconds, returns JSON in the format specified in the Run Calculations endpoint.

\item return type : object 
\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 400 | Invalid POST body.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 401 | Missing or invalid authentication.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
\item status code : 403 | User is forbidden with current credentials


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 404 | One or more calculation settings were unavailable.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 415 | Missing/Invalid Content-Type header. Header needs to be set to application/json.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
}
\item status code : 429 | Rate limit reached. Cancel older requests using Cancel Calculation endpoint or wait for older requests to finish/expire.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
X-RateLimit-Limit \tab Number of allowed requests for the time window. \cr
X-RateLimit-Remaining \tab Number of requests left for the time window. \cr
X-RateLimit-Reset \tab Number of seconds remaining till rate limit resets. \cr
Retry-After \tab Time to wait in seconds before making a new request as the rate limit has reached. \cr
}
\item status code : 500 | Server error. Log the X-DataDirect-Request-Key header to assist in troubleshooting.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
\item status code : 503 | Request timed out. Retry the request in sometime.


\item response headers :

\tabular{ll}{
Location \tab URL to poll for the resulting calculation \cr
X-FactSet-Api-Request-Key \tab Key to uniquely identify an Analytics API request. Only available after successful authentication. \cr
}
}

}
}

\examples{
\dontrun{
####################  CancelSPARCalculationById  ####################

library(factset.analyticsapi.engines)
var.id <- 'id_example' # character | from url, provided from the location header in the Run Calculation endpoint

#Cancel SPAR calculation
api.instance <- SPARCalculationsApi$new()

#Configure HTTP basic authorization: Basic
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- tryCatch(
            api.instance$CancelSPARCalculationById(var.id),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  GetSPARCalculationById  ####################

library(factset.analyticsapi.engines)
var.id <- 'id_example' # character | from url, provided from the location header in the Run Calculation endpoint

#Get SPAR calculation by id
api.instance <- SPARCalculationsApi$new()

#Configure HTTP basic authorization: Basic
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- tryCatch(
            api.instance$GetSPARCalculationById(var.id),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


####################  RunSPARCalculation  ####################

library(factset.analyticsapi.engines)
var.spar.calculation.parameters <- SPARCalculationParameters$new() # SPARCalculationParameters | 

#Run SPAR Calculation
api.instance <- SPARCalculationsApi$new()

#Configure HTTP basic authorization: Basic
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- tryCatch(
            api.instance$RunSPARCalculation(spar.calculation.parameters=var.spar.calculation.parameters),
            ApiException = function(ex) ex 
         )
# In case of error, print the error object 
if(!is.null(result$ApiException)) {
  cat(result$ApiException$toString())
} else {
# deserialized response object
response.object <- result$content
# response headers
response.headers <- result$response$headers
# response status code
response.status.code <- result$response$status_code
}


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SPARCalculationsApi$new()}}
\item \href{#method-CancelSPARCalculationById}{\code{SPARCalculationsApi$CancelSPARCalculationById()}}
\item \href{#method-CancelSPARCalculationByIdWithHttpInfo}{\code{SPARCalculationsApi$CancelSPARCalculationByIdWithHttpInfo()}}
\item \href{#method-GetSPARCalculationById}{\code{SPARCalculationsApi$GetSPARCalculationById()}}
\item \href{#method-GetSPARCalculationByIdWithHttpInfo}{\code{SPARCalculationsApi$GetSPARCalculationByIdWithHttpInfo()}}
\item \href{#method-RunSPARCalculation}{\code{SPARCalculationsApi$RunSPARCalculation()}}
\item \href{#method-RunSPARCalculationWithHttpInfo}{\code{SPARCalculationsApi$RunSPARCalculationWithHttpInfo()}}
\item \href{#method-clone}{\code{SPARCalculationsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CancelSPARCalculationById"></a>}}
\if{latex}{\out{\hypertarget{method-CancelSPARCalculationById}{}}}
\subsection{Method \code{CancelSPARCalculationById()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$CancelSPARCalculationById(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CancelSPARCalculationByIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CancelSPARCalculationByIdWithHttpInfo}{}}}
\subsection{Method \code{CancelSPARCalculationByIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$CancelSPARCalculationByIdWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetSPARCalculationById"></a>}}
\if{latex}{\out{\hypertarget{method-GetSPARCalculationById}{}}}
\subsection{Method \code{GetSPARCalculationById()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$GetSPARCalculationById(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetSPARCalculationByIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetSPARCalculationByIdWithHttpInfo}{}}}
\subsection{Method \code{GetSPARCalculationByIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$GetSPARCalculationByIdWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunSPARCalculation"></a>}}
\if{latex}{\out{\hypertarget{method-RunSPARCalculation}{}}}
\subsection{Method \code{RunSPARCalculation()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$RunSPARCalculation(spar.calculation.parameters = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunSPARCalculationWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunSPARCalculationWithHttpInfo}{}}}
\subsection{Method \code{RunSPARCalculationWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$RunSPARCalculationWithHttpInfo(
  spar.calculation.parameters = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPARCalculationsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
